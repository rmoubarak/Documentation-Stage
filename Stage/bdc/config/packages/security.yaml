security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

        # use your user class name here
        App\Entity\Utilisateur:
            # Use native password hasher, which auto-selects the best
            # possible hashing algorithm (starting from Symfony 5.3 this is "bcrypt")
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        user_db_sso:
            entity: { class: App\Entity\Utilisateur, property: login }
        user_db_public:
            entity: { class: App\Entity\Utilisateur, property: email }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        public:
            lazy: true
            custom_authenticators:
                - App\Security\FormLoginAuthenticator
            pattern: ^/public
            provider: user_db_public
            two_factor:
                auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
                check_path: 2fa_login_check  # The route name you have used in the routes.yaml
            logout:
                path: security_logout
                target: security_login # where to redirect after logout

        public_logout:
            pattern: /public/security/logout
            security: true

        logout:
            pattern: /logout
            security: true

        failed:
            pattern: /failed
            security: true

        main:
            lazy: true
            switch_user: true
            provider: user_db_sso
            logout:
                path: /logout
            custom_authenticators:
                - App\Security\SsoAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/public/security/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
